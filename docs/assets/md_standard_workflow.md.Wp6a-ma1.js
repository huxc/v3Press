import{_ as t,c as e,o as a,a4 as i}from"./chunks/framework.DzywJFVC.js";const g=JSON.parse('{"title":"前端代码规范化配置","description":"","frontmatter":{},"headers":[],"relativePath":"md/standard/workflow.md","filePath":"md/standard/workflow.md"}'),r={name:"md/standard/workflow.md"},s=i('<h1 id="前端代码规范化配置" tabindex="-1">前端代码规范化配置 <a class="header-anchor" href="#前端代码规范化配置" aria-label="Permalink to &quot;前端代码规范化配置&quot;">​</a></h1><p>为了项目团队统一编码风格以及对代码的约束，故引入以下配置。</p><h2 id="eslint-prettier-husky-lint-staged-工具介绍" tabindex="-1">ESLint + Prettier + husky + lint-staged 工具介绍 <a class="header-anchor" href="#eslint-prettier-husky-lint-staged-工具介绍" aria-label="Permalink to &quot;ESLint + Prettier + husky + lint-staged 工具介绍&quot;">​</a></h2><ul><li><strong>ESLint</strong>: 对代码进行风格和规范进行检查，对不符合规范的代码给出提示，同时可以进行一定程度的自动修复</li><li><strong>Prettier</strong>: 因 eslint 无法对 css 等文件进行修复，故使用 prettier 规范对 Css,Html 等进行自动格式化代码。</li><li><strong>Husky</strong>:Git hooks 工具，通过配置一系列钩子，可以在 git 操作的不同阶段执行相应的命令；</li><li><strong>lint-staged</strong>:在提交代码前进行 lint 检查时，可以让 lint 只检查 git 暂存区（staged）的文件，而不会检查所有文件；</li></ul><h2 id="eslint-配置" tabindex="-1">eslint 配置 <a class="header-anchor" href="#eslint-配置" aria-label="Permalink to &quot;eslint 配置&quot;">​</a></h2><p>结合之前章节的规范描述，制定了对应的 eslint 规范</p><h2 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h2><p>上述工具已经将最新版本集成在本模版项目中，如果代码规范不符合 eslint 要求，将无法提交代码到 git</p>',8),n=[s];function l(o,d,h,c,_,p){return a(),e("div",null,n)}const m=t(r,[["render",l]]);export{g as __pageData,m as default};
